<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>廢宅筆記</title>
    <link>https://blog.zackexplosion.fun/</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 03 Apr 2021 23:44:53 +0800</lastBuildDate><atom:link href="https://blog.zackexplosion.fun/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>每日出金！簡易又快速的以太幣顯卡挖礦教學</title>
        <link>https://blog.zackexplosion.fun/posts/simple-gpu-mining-eth-guide/</link>
        <pubDate>Sat, 03 Apr 2021 23:44:53 +0800</pubDate>
        
        <guid>https://blog.zackexplosion.fun/posts/simple-gpu-mining-eth-guide/</guid>
        <description>幣安是我找到最最最最最最好用的礦池了，每日約台北時間下午四點不限金額出金，一張卡挖礦也可以每天看得到你的收益，更是摸的到！</description>
      </item>
    
      <item>
        <title>AJAX載入測試檔案 Load Video With Axios</title>
        <link>https://blog.zackexplosion.fun/posts/load-video-with-axios/</link>
        <pubDate>Thu, 17 Sep 2020 12:15:03 +0800</pubDate>
        
        <guid>https://blog.zackexplosion.fun/posts/load-video-with-axios/</guid>
        <description>昨天想說把檔案快取在 localstorage 可以減少上傳的步驟，結果被卡小問題卡著，後來想到直接用 ajax 載入本地檔案不是更輕鬆嗎？
於是昨天的全部廢掉，改成這樣&amp;hellip;&amp;hellip;&amp;hellip;.
if (DEV) { const testvideo = await request({ url: &amp;#34;/test.mov&amp;#34;, method: &amp;#34;GET&amp;#34;, responseType: &amp;#34;blob&amp;#34; // important  }); this.$refs.video.src = URL.createObjectURL(testvideo.data); this.video = this.$refs.video; const buffer = await testvideo.data.arrayBuffer(); handleAudio.call(this, buffer); } 這樣可以省掉很多點來點去的時間&amp;hellip;.</description>
      </item>
    
      <item>
        <title>加速 Javascript File Upload 開發流程/檔案預先選取/檔案儲存localstorage</title>
        <link>https://blog.zackexplosion.fun/posts/javascript-file-upload-cache/</link>
        <pubDate>Wed, 16 Sep 2020 13:32:42 +0800</pubDate>
        
        <guid>https://blog.zackexplosion.fun/posts/javascript-file-upload-cache/</guid>
        <description>每次寫上傳檔案的功能都很靠北的要一直自己重新點，累死，研究了一下怎麼存在localstorage，這樣只要選一次，之後reload就可以省略掉這步驟了。
class DevCacheFile { key = &amp;#34;temp_file_cache&amp;#34;; constructor() {} save(file, result) { // save dev file to cache  const dataToSave = JSON.stringify({ type: file.type, blob: Array.from(new Uint8Array(result)) }); localStorage.setItem(this.key, dataToSave); } restore() { var data = localStorage.getItem(this.key); if (!data) return null; data = JSON.parse(data); var blob = new Uint8Array(data.blob).buffer; blob = new Blob([blob]); var file = new File([blob], { type: data.type }); return file; } } 用法大概這樣
// whatever.js  var file var devCacheFile = new DevCacheFile() var reader = new FileReader() reader.</description>
      </item>
    
      <item>
        <title>Macos Keyrepeat 速度調整</title>
        <link>https://blog.zackexplosion.fun/posts/macos-keyrepeat/</link>
        <pubDate>Tue, 01 Sep 2020 11:09:55 +0800</pubDate>
        
        <guid>https://blog.zackexplosion.fun/posts/macos-keyrepeat/</guid>
        <description>MacOS 預設的 keyrepeat 實在靠北慢，用下面的指令可以設定超過GUI能設定的上限
defaults write -g InitialKeyRepeat -int 12 # normal minimum is 15 (225 ms) defaults write -g KeyRepeat -int 2 # normal minimum is 2 (30 ms) 這是我自己習慣的設定，詳細請參考下方來源連結 https://apple.stackexchange.com/questions/10467/how-to-increase-keyboard-key-repeat-rate-on-os-x</description>
      </item>
    
      <item>
        <title>Capistrano-db-task sync disable confirm 關閉確認視窗</title>
        <link>https://blog.zackexplosion.fun/posts/capistrano-db-task-confrim/</link>
        <pubDate>Tue, 01 Sep 2020 09:49:26 +0800</pubDate>
        
        <guid>https://blog.zackexplosion.fun/posts/capistrano-db-task-confrim/</guid>
        <description>工作上很常用到 cap production db:pull 來同步 production 環境上使用者產生的資料，雖然多問無礙，但每次都問實在很煩，特別是這種要跑一陣子 task 常常執行下去後就去幹別的事。
總之，我從原始碼找到這個 SKIP_DATA_SYNC_CONFIRM 參數，搭配 direnv 設定後以後就不需要再被問惹。
https://codepen.io/zackexplosion/pen/MWyPLrx
拜託，問問題前先學會問問題的工具，把問題整理好別人才好幫助你，你這樣全部亂塞到github誰看的懂啦ww
不過你的問題很簡單，只是value打成Value而已&amp;hellip;&amp;hellip;..</description>
      </item>
    
  </channel>
</rss>